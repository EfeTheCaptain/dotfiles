#!/bin/bash

# Configuration
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}/yt_audio_player"
mkdir -p "$CACHE_DIR"
CACHE_FILE="$CACHE_DIR/last_session.json"

# Cleanup function
cleanup() {
    [ -n "$tmpfile" ] && rm -f "$tmpfile"
}
trap cleanup EXIT

# Get search query
read -rp "🔍 Search YouTube: " query
[ -z "$query" ] && exit 1

# Create temp file
tmpfile=$(mktemp) || { echo "Error: Could not create temp file"; exit 1; }

# Check cache first
if [ -s "$CACHE_FILE" ] && [[ "$(jq -r '.query' "$CACHE_FILE" 2>/dev/null)" == "$query" ]]; then
    echo "Using cached results..."
    cp "$CACHE_FILE" "$tmpfile"
else
    # Fetch fresh results
    if ! yt-dlp --flat-playlist --default-search "ytsearch5" -j "$query" 2>/dev/null | jq -s '.' > "$tmpfile"; then
        echo "Error: Search failed"
        exit 1
    fi
    # Cache results
    jq --arg q "$query" '. + {query: $q}' "$tmpfile" > "$CACHE_FILE"
fi

# Process results
results=$(cat "$tmpfile")
if [ -z "$results" ] || [ "$results" = "[]" ]; then
    echo "Error: No results found"
    exit 1
fi

# Format for fzf
formatted_results=$(jq -r '.[] | 
    ((.duration? // 0) | tonumber | strftime("%M:%S")) as $dur |
    "[\($dur)] \(.title)"' "$tmpfile")

# Select with fzf
selected=$(echo "$formatted_results" | fzf --height=40% --reverse --cycle --prompt="Select song: " --bind 'ctrl-c:abort')
[ -z "$selected" ] && exit 0

# Extract title and URL
title=$(echo "$selected" | sed -E 's/^\[[^]]*\] //' | sed 's/[[:space:]]*$//')
url=$(jq -r --arg t "$title" '.[] | select(.title == $t) | .webpage_url' "$tmpfile")

# Play with caching
if [ -n "$url" ]; then
    echo "Playing: $title"
    mpv --no-video \
        --cache=yes \
        --demuxer-max-bytes=500M \
        --demuxer-readahead-secs=60 \
        --stream-buffer-size=4MB \
        --input-ipc-server=/tmp/mpv-socket \
        "$url" || {
        echo "Error: Playback failed"
        exit 1
    }
else
    echo "Error: Could not extract URL"
    exit 1
fi
