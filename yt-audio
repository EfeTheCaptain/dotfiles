#!/bin/bash

# Single temporary file path
TMP_FILE="/tmp/yt_audio_tmp"

# Clear previous temp file if exists
[ -f "$TMP_FILE" ] && rm -f "$TMP_FILE"

# Cleanup function
cleanup() {
    [ -f "$TMP_FILE" ] && rm -f "$TMP_FILE"
}
trap cleanup EXIT

# Get search query
read -rp "🔍 Search YouTube: " query
[ -z "$query" ] && exit 1

# Fetch results and store in temp file
if ! yt-dlp --flat-playlist --default-search "ytsearch5" -j "$query" 2>/dev/null | jq -s '.' > "$TMP_FILE"; then
    echo "Error: Search failed"
    exit 1
fi

# Verify results
if [ ! -s "$TMP_FILE" ] || [ "$(jq -r 'length' "$TMP_FILE")" -eq 0 ]; then
    echo "Error: No results found"
    exit 1
fi

# Format and display results
formatted_results=$(jq -r '.[] | 
    ((.duration? // 0) | tonumber | strftime("%M:%S")) as $dur |
    "[\($dur)] \(.title)"' "$TMP_FILE")

# Select with fzf
selected=$(echo "$formatted_results" | fzf --height=40% --reverse --cycle --prompt="Select song: " --bind 'ctrl-c:abort')
[ -z "$selected" ] && exit 0

# Extract title and URL safely
title=$(echo "$selected" | sed -E 's/^\[[^]]*\] //' | sed 's/[[:space:]]*$//')
url=$(jq -r --arg t "$title" '.[] | select(.title | contains($t)) | .webpage_url' "$TMP_FILE")

# Play with optimized settings
if [ -n "$url" ]; then
    echo "Playing: $title"
    mpv --no-video \
        --cache=yes \
        --cache-secs=5 \
        --demuxer-max-bytes=50M \
        --demuxer-max-back-bytes=5M \
        --volume=100 \
        --really-quiet \
        "$url" || {
        echo "Error: Playback failed"
        exit 1
    }
else
    echo "Error: Could not extract URL"
    exit 1
fi
