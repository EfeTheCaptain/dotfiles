#!/bin/bash

# Function to clean up on exit
cleanup() {
    [ -n "$tmpfile" ] && rm -f "$tmpfile"
}
trap cleanup EXIT

# Get search query
read -rp "🔍 Search YouTube: " query
[ -z "$query" ] && exit 1

# Create temp file for results
tmpfile=$(mktemp) || { echo "Error: Could not create temp file"; exit 1; }

# Get 5 results as JSON array
if ! yt-dlp --flat-playlist --default-search "ytsearch5" -j "$query" 2>/dev/null | jq -s '.' > "$tmpfile"; then
    echo "Error: Search failed (check connection/install)"
    exit 1
fi

# Extract all results into arrays
mapfile -t titles < <(jq -r '.[].title' "$tmpfile")
mapfile -t durations < <(jq -r '.[] | (.duration? // 0) | tonumber | strftime("%M:%S")' "$tmpfile")
mapfile -t urls < <(jq -r '.[].webpage_url' "$tmpfile")

# Verify we got results
if [ ${#titles[@]} -eq 0 ]; then
    echo "Error: No results found"
    exit 1
fi

# Display numbered results
echo ""
echo "Search results:"
for i in "${!titles[@]}"; do
    printf "%d) [%s] %s\n" $((i+1)) "${durations[$i]}" "${titles[$i]}"
done

# Let user select
read -rp "Select video (1-${#titles[@]}): " selection

# Validate input
if ! [[ "$selection" =~ ^[1-5]$ ]] || [ "$selection" -gt "${#titles[@]}" ]; then
    echo "Invalid selection"
    exit 1
fi

# Adjust for zero-based index
index=$((selection-1))

# Play selected video
echo "Playing: ${titles[$index]}"
mpv --no-video --really-quiet "${urls[$index]}" || {
    echo "Error: Playback failed (try installing mpv/ffmpeg)"
    exit 1
}
